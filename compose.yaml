services:
  # MongoDB
  mongo:
    image: mongo:6.0
    container_name: tournament-mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - tournament-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: tournament-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - tournament-network
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: tournament-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_LOG_CLEANUP_POLICY: "compact"
      KAFKA_LOG_RETENTION_MS: 1000000
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_BYTES: 2147483648
      KAFKA_NUM_PARTITIONS: 1
    networks:
      - tournament-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:29092", "--list"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # API NodeJS
  api:
    build:
      context: ./tournament-manager-api
      dockerfile: Dockerfile
    container_name: tournament-api
    ports:
      - "3000:3000"
    environment:
      PORT: 3000
      MONGO_URI: mongodb://mongo:27017/tournament_designer
      KAFKA_BROKERS: kafka:29092
    depends_on:
      mongo:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - tournament-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 15s
    restart: unless-stopped

  # UI Angular
  ui:
    build:
      context: ./tournament-manager-ui
      dockerfile: Dockerfile
    container_name: tournament-ui
    ports:
      - "80:80"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - tournament-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Job Consumer Kafka
  job:
    build:
      context: ./kafka
      dockerfile: Dockerfile
    container_name: tournament-job
    environment:
      KAFKA_BROKERS: kafka:29092
      KAFKA_GROUP_ID: registros-consumer
      KAFKA_TOPIC: registros
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - tournament-network
    healthcheck:
      test: ["CMD", "ps", "aux", "|", "grep", "node", "|", "grep", "-v", "grep"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

networks:
  tournament-network:
    driver: bridge

volumes:
  mongo_data:
